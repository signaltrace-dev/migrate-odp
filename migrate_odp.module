<?php

function migrate_odp_node_view($node){
}

function migrate_odp_menu(){
  $items = array();

  $items['admin/migrate/workflows'] = array(
    'title' => t('Migrate workflows data'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('migrate_odp_admin_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/migrate/files'] = array(
    'title' => t('Migrate files data'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('migrate_odp_admin_form_files'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/migrate/revisions'] = array(
    'title' => t('Migrate revisions data'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('migrate_odp_admin_form_revisions'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

function migrate_odp_admin_form($form, &$form_state){
  $migrated = variable_get('migrate_workflow_status', FALSE);
  if($migrated){
    $form['lbl_migrated'] = array(
      '#prefix' => '<div class="alert alert-info">',
      '#suffix' => '</div>',
      '#markup' => t('Migration already executed.'),
    );
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Migrate',
  );

  return $form;
}

function migrate_odp_admin_form_submit($form, &$form_state){
  migrate_odp_fix_workflows(TRUE);
  migrate_odp_delete_stubs();
  migrate_odp_disable_comments();
}

function migrate_odp_admin_form_files($form, &$form_state){
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Migrate Files',
  );

  return $form;
}

function migrate_odp_admin_form_files_submit($form, &$form_state){
  migrate_odp_fix_files();
}


function migrate_odp_fix_files(){
  $files = migrate_odp_get_null_files();
  foreach($files as $file){
    $old_fid = $file['fid'];

    unset($file['type']);
    unset($file['fid']);
    $new_fid = db_insert('file_managed')
    ->fields($file)
    ->execute();

    db_update('migrate_map_ecogigfile')
      ->fields(array(
        'destid1' => $new_fid,
      ))
      ->condition('sourceid1', $old_fid, '=')
      ->execute();
  }

  $files = migrate_odp_get_orphaned_files();
  migrate_odp_migrate_orphaned_files($files);
}

function migrate_odp_get_file_fields(){
  $query = db_select('field_config', 'f')
  ->fields('f', array('field_name'))
  ->condition('type', array('file', 'image'), 'IN');
  $results = $query->execute();

  $fields = array();
  while($row = $results->fetchAssoc()){
    $fields[$row['field_name']] = $row['field_name'];
  }

  return $fields;
}

function migrate_odp_get_all_files(){
  $query = db_select('file_managed', 'f')
  ->fields('f', array('fid'));
  $results = $query->execute();

  $fids = array();
  while($row = $results->fetchAssoc()){
    $fids[$row['fid']] = $row['fid'];
  }

  return $fids;
}

function migrate_odp_get_orphaned_files(){
  $all_fids = migrate_odp_get_all_files();
  $file_fields = migrate_odp_get_file_fields();
  $old_files = array();

  foreach($file_fields as $field_name){
    $old_fids[$field_name] = array();

    $table = 'field_data_' . $field_name;
    $column = $field_name . '_fid';

    $query = db_select($table, 'f')
    ->fields('f')
    ->condition($column, $all_fids, 'NOT IN');
    $results = $query->execute();

    while($row = $results->fetchAssoc()){
      $old_files[$field_name][] = array(
        'nid' => $row['entity_id'],
        'old_fid' => $row[$column],
        'table' => $table,
        'column' => $column,
      );
    }
  }

  return $old_files;
}

function migrate_odp_migrate_orphaned_files($old_files){
  db_set_active('odp');

  foreach($old_files as $field_name => $files){
    foreach($files as $key => $value){
      $old_fid = $value['old_fid'];
      $query = db_select('file_managed', 'f')
      ->fields('f')
      ->condition('fid', $old_fid, '=');
      $results = $query->execute();

      while($row = $results->fetchAssoc()){
        unset($row['type']);
        unset($row['fid']);
        $old_files[$field_name][$key]['file'] = $row;
      }
    }
  }

  db_set_active();
/*
  foreach($old_files as $field_name => $files){
    foreach($files as $key => $value){
      $old_fid = $value['old_fid'];
      $file = $value['file'];

      $new_fid = db_insert('file_managed')
      ->fields($file)
      ->execute();

      db_update('migrate_map_ecogigfile')
        ->fields(array(
          'destid1' => $new_fid,
        ))
        ->condition('sourceid1', $old_fid, '=')
        ->execute();


    }
  }*/

  dpm($old_files);
}

function migrate_odp_admin_form_revisions($form, &$form_state){
  $migrated = variable_get('migrate_workflow_status_revisions', FALSE);
  if($migrated){
    $form['lbl_migrated'] = array(
      '#prefix' => '<div class="alert alert-info">',
      '#suffix' => '</div>',
      '#markup' => t('Migration already executed.'),
    );
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Migrate',
    '#name' => 'migrate',
  );

  $form['cancel'] = array(
    '#type' => 'submit',
    '#value' => 'Cancel',
    '#name' => 'cancel',
  );

  return $form;
}

function migrate_odp_admin_form_revisions_submit($form, &$form_state){
  switch($form_state['triggering_element']['#name']){
    case 'migrate':
      $old_workflows = migrate_odp_get_workflows('odp');
      $new_workflows = migrate_odp_get_workflows();
      $state_mappings = migrate_odp_get_state_mappings($old_workflows, $new_workflows);
      $node_mappings = migrate_odp_get_node_mappings();
      $user_mappings = migrate_odp_get_user_mappings();
      $file_mappings = migrate_odp_get_mappings('file');

      $mappings = array(
        'state_mappings' => $state_mappings,
        'node_mappings' => $node_mappings,
        'user_mappings' => $user_mappings,
        'file_mappings' => $file_mappings,
      );

      variable_set('migrate_odp_cancel', FALSE);

      db_set_active('odp');
      $query = db_select('node_revision', 'r');
      $query->join('node', 'n', 'r.nid = n.nid');
      $query->fields('r');

      $results = $query->execute()->fetchAll();
      db_set_active();

      $batch = array(
        'title' => t('Migrating revisions'),
        'operations' => array(
          array('migrate_odp_migrate_revisions', array($mappings, $results)),
        ),
        'finished' => 'migrate_odp_migrate_revisions_callback',
        'init_message' => t('Beginning revision migration.'),
        'error_message' => t('Revision Migration has encountered an error.'),
      );

      batch_set($batch);
      break;
    case 'cancel':
      variable_set('migrate_odp_cancel', TRUE);
      break;
  }
}

function migrate_odp_migrate_revisions_callback($success, $results, $operations){
  // The 'success' parameter means no fatal PHP errors were detected. All
  // other error management should be handled using 'results'.
  if ($success) {
    $message = t('%count revisions processed.', array('%count' => count($results)));
    //migrate_odp_set_current_revision();
  }
  else {
    drupal_set_message(t('An error occurred and processing did not complete.'), 'error');
    $message = format_plural(count($results), '1 item successfully processed:', '@count items successfully processed:');
    $message .= theme('item_list', array('items' => $results));
    drupal_set_message($message);
  }
  drupal_set_message($message);
  // Providing data for the redirected page is done through $_SESSION.
  foreach ($results as $result) {
    $items[] = t('Loaded node %title.', array('%title' => $result));
  }
  //$_SESSION['my_batch_results'] = $items;
}

function migrate_odp_get_workflows($source_db = NULL){
  if(!empty($source_db)){
    db_set_active('odp');
  }

  $workflows = array();
  $query = db_select('workflows', 'w');
  $query->fields('w', array('wid', 'name', 'label'));

  $results = $query->execute();
  while($row = $results->fetchAssoc()){
    if(!empty($row['wid'])){
      $state_query = db_select('workflow_states', 's');
      $state_query->fields('s', array('sid', 'name', 'state'));
      $state_query->condition('s.wid', $row['wid'], '=');
      $state_results = $state_query->execute();
      $states = array();
      while($srow = $state_results->fetchAssoc()){
        if(!empty($srow['sid'])){
          $states[$srow['sid']] = array(
            'name' => $srow['name'],
            'state' => $srow['state'],
          );
        }
      }

      $workflows[$row['wid']] = array(
        'name' => $row['name'],
        'desc' => $row['label'],
        'states' => $states,
      );
    }
  }

  db_set_active();

  ksort($workflows);
  return $workflows;
}

function migrate_odp_get_state_mappings($old_workflows, $new_workflows){
  $all_old_states = array();
  foreach($old_workflows as $wf){
    $wf_name = $wf['name'];
    $all_old_states[$wf_name] = array();

    foreach($wf['states'] as $sid => $state){
      $all_old_states[$wf_name][$sid] = $state;
    }
  }

  $all_new_states = array();
  foreach($new_workflows as $wf){
    $wf_name = $wf['name'];
    $all_new_states[$wf_name] = array();

    foreach($wf['states'] as $sid => $state){
      $all_new_states[$wf_name][$sid] = $state;
    }
  }

  $state_mappings = array();

  foreach($all_old_states as $wf_name => $old_states){
    if(!empty($all_new_states[$wf_name])){
      $new_states = $all_new_states[$wf_name];

      foreach($old_states as $old_key => $old_state){
        foreach($new_states as $new_key => $new_state){
          if($old_state['name'] == $new_state['name']){
            $state_mappings[$old_key] = $new_key;
          }
        }
      }
    }

  }
  ksort($state_mappings);

  return $state_mappings;
}
function migrate_odp_get_states($workflows){
  $all_states = array();
  foreach($workflows as $wf){
    foreach($wf['states'] as $sid => $state){
      $all_states[$sid] = $state;
    }
  }

  ksort($all_states);
  return $all_states;
}

function migrate_odp_insert_state_mappings($state_mappings, $old_states, $new_states){
  db_delete('migrate_workflow_state_mappings')->execute();
  foreach($state_mappings as $old_sid => $new_sid){
    $entry = array(
      'old_sid' => $old_sid,
      'sid' => $new_sid,
      'old_name' => !empty($old_states[$old_sid]['name']) ? $old_states[$old_sid]['name'] : 'none',
      'old_state' => !empty($old_states[$old_sid]['state']) ? $old_states[$old_sid]['state'] : t('N/A'),
    );

    db_insert('migrate_workflow_state_mappings')
    ->fields($entry)
    ->execute();
  }
}

function migrate_odp_update_workflow_fields($state_mappings, $execute = FALSE){
  $fields = array(
    'field_identify_state',
    'field_metadata_state',
    'field_data_state',
    'field_repository_state',
    'field_availability_state',
  );

  $field_data = migrate_odp_get_field_data($fields);
  foreach($field_data as $entry){
    $nid = !empty($entry['entity_id']) ? $entry['entity_id'] : 0;
    $sid = !empty($entry['value']) ? $entry['value'] : 0;
    $old_sid = !empty($entry['old_sid']) ? $entry['old_sid'] : $sid;
    $table = !empty($entry['table']) ? $entry['table'] : NULL;
    $column = !empty($entry['column']) ? $entry['column'] : NULL;

    $updated_sid = !empty($state_mappings[$old_sid]) ? $state_mappings[$old_sid] : $old_sid;

    if($execute && !empty($table) && !empty($column)){
      $update = db_update($table)
      ->fields(array(
        $column => $updated_sid,
      ))
      ->condition($column, $sid, '=')
      ->condition('entity_id', $nid, '=');
      $result = $update->execute();
    }
  }
}

function migrate_odp_get_source_value($nid, $table, $column){
  db_set_active('odp');

  $value = NULL;

  $query = db_select($table, 'f');
  $query->condition('entity_id', $nid, '=');
  $query->addField('f', $column, 'value');
  $results = $query->execute();

  while($row = $results->fetchAssoc()){
    $value = $row['value'];
  }

  db_set_active();

  return $value;
}

function migrate_odp_get_field_data($fields){
  $node_mappings = migrate_odp_get_node_mappings();
  $node_mappings = array_flip($node_mappings);
  $entries = array();

  foreach($fields as $field_name){
    $table = 'field_data_' . $field_name;
    $column = $field_name . '_value';

    $query = db_select($table, 'f');
    $query->addField('f', $column, 'value');
    $query->addField('f', 'entity_id', 'entity_id');
    $results = $query->execute();

    while($row = $results->fetchAssoc()){
      $row['table'] = $table;
      $row['column'] = $column;

      if($field_name == 'field_data_state'){
        $old_nid = !empty($node_mappings[$row['entity_id']]) ? $node_mappings[$row['entity_id']] : NULL;
        if(!empty($old_nid)){
          $old_value = migrate_odp_get_source_value($old_nid, $table, $column);
          $row['old_sid'] = $old_value;
        }
      }
      $entries[] = $row;
    }
  }

  return $entries;
}

function migrate_odp_get_node_mappings(){
  $nodes = array();
  $query = db_select('migrate_map_ecogignodedataset', 'n');
  $query->fields('n', array('sourceid1', 'destid1'));

  $results = $query->execute();
  while($row = $results->fetchAssoc()){
    if(!empty($row['sourceid1'])){
      $nodes[$row['sourceid1']] = $row['destid1'];
    }
  }

  return $nodes;
}

function migrate_odp_get_user_mappings(){
  $users = array();
  $query = db_select('migrate_map_ecogiguser', 'u');
  $query->fields('u', array('sourceid1', 'destid1'));

  $results = $query->execute();
  while($row = $results->fetchAssoc()){
    if(!empty($row['sourceid1'])){
      $users[$row['sourceid1']] = $row['destid1'];
    }
  }

  return $users;
}

function migrate_odp_migrate_history($state_mappings, $node_mappings, $user_mappings, $legacy_workflows, $execute = FALSE){
  // Delete current history
  if($execute){
    db_delete('workflow_node_history')->execute();
    db_delete('migrate_workflow_legacy_history')->execute();
  }

  // Get history from source DB
  $history = migrate_odp_get_legacy_history();
  foreach($history as $key => $entry){
    $is_legacy = FALSE;

    $old_sid = $entry['old_sid'];
    $sid = $entry['sid'];

    // Update node value
    $nid = $entry['nid'];
    $updated_nid = !empty($node_mappings[$nid]) ? $node_mappings[$nid] : $nid;
    $entry['nid'] = $updated_nid;

    // Update user value
    $uid = $entry['uid'];
    $updated_uid = !empty($user_mappings[$uid]) ? $user_mappings[$uid] : $uid;
    $entry['uid'] = $updated_uid;

    // If "legacy" state, insert into legacy table
    foreach($legacy_workflows as $wf_key => $wf){
      foreach($wf['states'] as $legacy_sid => $legacy_state){
        if($old_sid == $legacy_sid || $sid == $legacy_sid){
          $is_legacy = TRUE;
          $wf_name = !empty($wf['name']) ? $wf['name'] : 'legacy_workflow';
          $wf_desc = !empty($wf['desc']) ? $wf['desc'] : t('Old Workflow');

          $old_state_name = !empty($wf['states'][$old_sid]['name']) ? $wf['states'][$old_sid]['name'] : t('old_state');
          $old_state_desc = !empty($wf['states'][$old_sid]['state']) ? $wf['states'][$old_sid]['state'] : t('Old State');

          $state_name = !empty($wf['states'][$sid]['name']) ? $wf['states'][$sid]['name'] : 'legacy_state';
          $state_desc = !empty($wf['states'][$sid]['state']) ? $wf['states'][$sid]['state'] : t('Old State');

          $legacy_entry = array(
            'nid' => $entry['nid'],
            'wid' => $wf_key,
            'old_workflow' => $wf_desc,
            'old_sid' => $old_sid,
            'sid' => $sid,
            'old_state' => $old_state_desc,
            'state' => $state_desc,
            'uid' => $entry['uid'],
            'name' => $entry['name'],
            'stamp' => $entry['stamp'],
            'comment' => $entry['comment'],
          );
        }
      }
    }
    if($is_legacy){
      migrate_odp_create_legacy_history_entry($legacy_entry);
    }
    // Else update SID values and insert into history
    else{
      // Unset column that is only needed for legacy history entries
      unset($entry['name']);
      $updated_old_sid = !empty($state_mappings[$old_sid]) ? $state_mappings[$old_sid] : $old_sid;
      $updated_sid = !empty($state_mappings[$sid]) ? $state_mappings[$sid] : $sid;
      $entry['old_sid'] = $updated_old_sid;
      $entry['sid'] = $updated_sid;
      if($execute){
        migrate_odp_create_history_entry($entry);
      }
    }
  }
}

function migrate_odp_get_legacy_history(){
  db_set_active('odp');
  $query = db_select('workflow_node_history', 'h');
  $query->join('users', 'u', 'h.uid = u.uid');
  $query
    ->fields('h')
    ->fields('u', array('name'));
  $results = $query->execute();

  $entries = array();
  while($row = $results->fetchAssoc()){
    $entries[] = $row;
  }
  db_set_active();

  return $entries;
}

function migrate_odp_get_legacy_workflows($old_workflows, $new_workflows){
  $legacy_workflows = array();
  foreach($old_workflows as $key => $value){
    $exists = FALSE;
    $wf_name = $value['name'];
    foreach($new_workflows as $new_key => $new_value){
      $new_wf_name = $new_value['name'];
      if($new_wf_name == $wf_name){
        $exists = TRUE;
      }
    }

    if(!$exists){
      $legacy_workflows[$key] = $value;
    }
  }

  return $legacy_workflows;
}

function migrate_odp_fix_workflows($execute = FALSE){
  $old_workflows = migrate_odp_get_workflows('odp');
  $new_workflows = migrate_odp_get_workflows();
  $state_mappings = migrate_odp_get_state_mappings($old_workflows, $new_workflows);
  $all_old_states = migrate_odp_get_states($old_workflows);
  $all_new_states = migrate_odp_get_states($new_workflows);
  $legacy_workflows = migrate_odp_get_legacy_workflows($old_workflows, $new_workflows);
  $node_mappings = migrate_odp_get_node_mappings();
  $user_mappings = migrate_odp_get_user_mappings();

  // Insert state mappings for historical lookup table
  migrate_odp_insert_state_mappings($state_mappings, $all_old_states, $all_new_states);

  // Go through fields and update current state values to new state values
  migrate_odp_update_workflow_fields($state_mappings, $execute);

  // Update Workflow history to match new states and NIDs
  migrate_odp_migrate_history($state_mappings, $node_mappings, $user_mappings, $legacy_workflows, $execute);

  variable_set('comment_maintain_node_statistics', TRUE);
  devel_rebuild_node_comment_statistics();

  cache_clear_all();
  if($execute){
    drupal_set_message('Updated workflow node references and workflow node history.');
    variable_set('migrate_workflow_status', TRUE);
  }
}

function migrate_odp_create_history_entry($entry){
  db_insert('workflow_node_history')
  ->fields($entry)
  ->execute();
}

function migrate_odp_create_legacy_history_entry($entry){
  db_insert('migrate_workflow_legacy_history')
  ->fields($entry)
  ->execute();
}

function migrate_odp_get_revision_count(){
  $results = db_select('node_revision')->fields('node_revision', array('vid'))->execute()->fetchAll();
  $count = count($results);
  return $count;
}

function migrate_odp_delete_revisions(){
  db_set_active();
  db_delete('node_revision')->execute();
}

function migrate_odp_migrate_revisions($mappings, $results, $context){
  $is_cancel = variable_get('migrate_odp_cancel', FALSE);

  if($is_cancel){
    $context['finished'] = 1;
  }
  else{
    $field_mappings = array(
      'field_griidc_udi' => 'field_repo_udi',
      'field_blog_title' => 'field_research_expedition',
    );

    $node_mappings = $mappings['node_mappings'];
    $user_mappings = $mappings['user_mappings'];
    $state_mappings = $mappings['state_mappings'];
    $file_mappings = $mappings['file_mappings'];

    db_set_active('odp');

    if (empty($context['sandbox'])) {
      $context['sandbox']['progress'] = 0;
      $context['sandbox']['mappings'] = array();
      $context['sandbox']['max'] = count($results);
      $context['sandbox']['revisions'] = $results;
    }

    $total_revisions = count($results);
    $revisions_left = $context['sandbox']['revisions'];
    $revisions_left_count = count($revisions_left);
    $processed = $total_revisions - $revisions_left_count;

    $limit = min(10, count($context['sandbox']['revisions']));

    $instances = array();
    $values = array();
    for($i = 0; $i < $limit; $i++) {
      $row = array_shift($context['sandbox']['revisions']);
      $nid = !empty($row->nid) ? $row->nid : NULL;
      $vid = !empty($row->vid) ? $row->vid : NULL;
      $uid = !empty($row->uid) ? $row->uid : 1;
      $new_uid = !empty($user_mappings[$uid]) ? $user_mappings[$uid] : $uid;
      $row->uid = $new_uid;

      // Don't bother with nodes that weren't migrated over
      $new_nid = !empty($node_mappings[$nid]) ? $node_mappings[$nid] : NULL;

      if(!empty($new_nid)){
        $row->nid = $new_nid;
        $new_vid = migrate_odp_create_revision($row);
        db_set_active('odp');

        $node = node_load($nid);
        $type = !empty($node->type) ? $node->type : NULL;

        $field_instances = !empty($type) ? field_info_instances('node', $type) : array();
        foreach($field_instances as $field_name => $instance){
          $field_name_updated = $field_name;
          $field_info = field_info_field($field_name);
          $field_type = !empty($field_info['type']) ? $field_info['type'] : NULL;

          $value_label = NULL;
          switch($field_type){
            case 'taxonomy_term_reference':
              $value_label = '_tid';
              break;
            case 'text':
              $value_label = '_value';
              break;
            case 'entityreference':
              $value_label = '_target_id';
              break;
            case 'file':
              $value_label = '_fid';
              break;
            default:
              $value_label = '_value';
              break;
          }
          if(!empty($field_type)){
            if($field_type != 'workflow'){
              $mappings = migrate_odp_get_mappings($field_type);
            }
            else{
              $mappings = $state_mappings;
            }
          }


          if(!empty($mappings)){
            db_set_active();
          }

          db_set_active('odp');

          $revision_field = 'field_revision_' . $field_name;

          $revision_query = db_select($revision_field, 'f');
          $revision_query->condition('entity_id', $nid);
          $revision_query->condition('revision_id', $vid);
          $revision_query->fields('f');
          $revision_results = $revision_query->execute();
          while($revision_row = $revision_results->fetchAssoc()){
            $updated_field_name = $field_name;

            $value = !empty($revision_row[$field_name . $value_label]) ? $revision_row[$field_name . $value_label] : NULL;
            $new_value = !empty($mappings[$value]) ? $mappings[$value] : $value;

            $revision_arr = (array)$revision_row;
            $revision_arr['revision_id'] = $new_vid;
            $revision_arr['entity_id'] = $new_nid;

            if(!empty($field_mappings[$field_name])){
              $updated_field_name = $field_mappings[$field_name];
              $revision_field = 'field_revision_' . $updated_field_name;

              unset($revision_arr[$field_name . $value_label]);
              if(array_key_exists($field_name . '_format', $revision_arr)){
                unset($revision_arr[$field_name . '_format']);
                $revision_arr[$updated_field_name . '_format'] = NULL;
              }

            }

            if(!empty($new_value)){
              $revision_arr[$updated_field_name . $value_label] = $new_value;
            }


            migrate_odp_create_revision_field_val($revision_field, $revision_arr);
            db_set_active('odp');

          }
        }
      }
      $context['message'] = t('Processed @processed of @total', array('@processed' => $processed, '@total' => $total_revisions));
      $context['sandbox']['progress']++;
    }

    if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
      $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
    }
    db_set_active();
  }
}

function migrate_odp_create_revision($row){
  db_set_active();

  $new_vid = db_insert('node_revision')
    ->fields(array(
      'nid' => $row->nid,
      'uid' => $row->uid,
      'title' => $row->title,
      'log' => $row->log,
      'timestamp' => $row->timestamp,
      'status' => $row->status,
      'comment' => $row->comment,
      'promote' => $row->promote,
      'sticky' => $row->sticky,
    ))
    ->execute();
  return $new_vid;
}

function migrate_odp_create_revision_field_val($table, $row){
  db_set_active();

  try{
    if(db_table_exists($table)){
      $new_id = db_insert($table)
        ->fields($row)
        ->execute();
    }
  }
  catch(Exception $ex){
  }
}

function migrate_odp_get_mappings($type){
  db_set_active();
  $entries = array();

  $tables = array();
  switch($type){
    case 'file':
      $tables = array(
        'migrate_map_ecogigfile',
      );
    break;
    case 'taxonomy_term_reference':
      $tables = array(
        'migrate_map_ecogigtermblog_title',
        'migrate_map_ecogigtermcontact_person_roles',
        'migrate_map_ecogigtermdata_type',
        'migrate_map_ecogigtermdataset_file_formats',
        'migrate_map_ecogigtermdataset_place_keywords',
        'migrate_map_ecogigtermdataset_record_types',
        'migrate_map_ecogigtermdataset_theme_keywords',
        'migrate_map_ecogigtermdataset_topic_category_keywords',
        'migrate_map_ecogigtermgomri_theme',
        'migrate_map_ecogigterminstitutional_departments',
        'migrate_map_ecogigtermjournal',
        'migrate_map_ecogigtermlocation',
        'migrate_map_ecogigtermparticipant_roles',
        'migrate_map_ecogigtermpersonnel',
        'migrate_map_ecogigtermstudent_types',
        'migrate_map_ecogigtermtags',
        'migrate_map_ecogigtermtask_title',
      );
    break;
    case 'entityreference':
      $tables = array(
        'migrate_map_ecogignodedataset',
        'migrate_map_ecogignodeparticipant',
        'migrate_map_ecogignodepresentation',
        'migrate_map_ecogignodeprofile',
        'migrate_map_ecogignodepublic_outreach',
        'migrate_map_ecogignodepublications',
        'migrate_map_ecogignodequarterly_report_no_activity_rec',
        'migrate_map_ecogignodestudents',
        'migrate_map_ecogignodeworkshop',
      );
    break;
    case 'user':
      $tables = array(
        'migrate_map_ecogiguser',
      );
    break;
  }

  foreach($tables as $table){
    $query = db_select($table, 't');
    $query
      ->fields('t');
    $results = $query->execute();

    while($row = $results->fetchAssoc()){
      $entries[$row['sourceid1']] = $row['destid1'];
    }
  }

  return $entries;
}

function migrate_odp_get_null_files(){
  $files = array();
  $fids = array();
  $query = db_select('migrate_map_ecogigfile', 't');
  $query
    ->fields('t')
    ->isNull('destid1');
  $results = $query->execute();

  while($row = $results->fetchAssoc()){
    $fids[] = $row['sourceid1'];
  }

  if(count($fids) > 0){
    db_set_active('odp');
    $query = db_select('file_managed', 'f')
      ->fields('f')
      ->condition('fid', $fids, 'IN');
    $results = $query->execute();
    while($row = $results->fetchAssoc()){
      $files[] = $row;
    }
    db_set_active();
  }

  return $files;
}

function migrate_odp_delete_stubs(){
  db_delete('node_revision')
    ->condition('title', 'Stub', '=')
    ->execute();
}

function migrate_odp_disable_comments(){
  db_update('node')
    ->fields(array(
      'comment' => 0,
    ))
    ->execute();

  db_update('node_revision')
    ->fields(array(
      'comment' => 0,
    ))
    ->execute();
}

function migrate_odp_set_current_revision(){
  $old_vid = NULL;
  $new_vid = NULL;

  $query = db_select('node', 'n')
    ->fields('n', array('nid', 'vid'));
  $results = $query->execute();

  $nids = array();
  while($row = $results->fetchAssoc()){
    $nids[$row['nid']] = array(
      'vid' => $row['vid'],
    );
  }

  foreach($nids as $nid => $node){
    $query = db_query('SELECT MAX(vid) AS vid FROM node_revision WHERE nid = :nid', array(
      ':nid' => $nid
    ));
    //$results = $query->execute();
    while($row = $query->fetchAssoc()){
      $old_vid = $node['vid'];
      $new_vid = $row['vid'];
      if($new_vid != $old_vid && !empty($new_vid)){
        // Set node vid to new vid
        db_update('node')
          ->fields(array(
            'vid' => $new_vid,
          ))
          ->condition('nid', $nid, '=')
          ->execute();

        // Delete old revision from DB
        node_revision_delete($old_vid);
      }
    }
  }
}
